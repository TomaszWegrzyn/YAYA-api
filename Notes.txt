1. DDD must be applied.
- Aggregates must be designed correctly, because order of events is only preserved per aggregate.
2. Understanding of CQRS is required.
- The read model is a separate model from the write model.
- The read model is updated asynchronously, which means UI is eventually consistent. For UI devs optimistic UI patterns are required.
3. We can't rely on relational DB features like constraints. We need to solve such problems differently:
	- We can use a unique constraint in the read model(no usually the UI validation would block this). 
	  This is NOT a guarantee that the write model will not have duplicates. 
      In rare event of duplicate occuring, we need to issue compensating action(for example rename the duplciate)
	- Alternatively we need to implement a saga that would check for duplicates and issue compensating action if needed.
	  For example we can have separate service/module that uses Relational DB to check for unique constraint violations. 
	  But because this involves two services, we need a saga
	- Alternatively we can use reservation pattern. 
	  For example we can reserve a unique name for a short period of time and if the name is not used, we can use it. 
	- Probably you actually DO NOT NEED unique constraints. 

4. Event Store DB documentation is lacking.

